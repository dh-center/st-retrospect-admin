"""Converts MongoDB ObjectId value to the Global Unique ID"""
directive @toGlobalId(type: String!) on FIELD_DEFINITION

"""Extracts value from specified field in parent object"""
directive @fromField(name: String!) on FIELD_DEFINITION

"""
Directive for multilingual fields support

On input field maps provided value to multilingual object (e.g. 'hello' => {en: 'hello'})
On type field maps multilingual object to value ({en: 'hello'} => 'hello')
"""
directive @multilingual on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Load data via specific dataLoader"""
directive @dataLoader(
  """Name of needed DataLoader"""
  dataLoaderName: String!

  """Name of field with data for DataLoader"""
  fieldName: String

  """Arg name to extract id from"""
  argName: String
) on FIELD_DEFINITION

"""Directive for pagination according to the Relay specification"""
directive @pagination(collectionName: String!) on FIELD_DEFINITION

"""Directive for checking user authorization"""
directive @authCheck on FIELD_DEFINITION

"""Directive for checking admin permissions"""
directive @adminCheck on FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""Location address representation"""
type Address {
  country: Country
  region: Region
  place: MultilingualString
  locality: MultilingualString
  address: MultilingualString
  address2: MultilingualString
  postcode: MultilingualString
}

input Coordinates {
  longitude: Float!
  latitude: Float!
}

type Country implements Node {
  id: ID!
  code: String!
  name: MultilingualString!
}

input CreateAddressInput {
  countryCode: String!
  regionCode: String!
  place: MultilingualString
  locality: MultilingualString
  address: MultilingualString!
  address2: MultilingualString
  postcode: MultilingualString
}

input CreateLocationInput {
  """Location position latitude"""
  latitude: Float!

  """Location position longitude"""
  longitude: Float!

  """Possible location representations"""
  instances: [LocationInstanceInput!]!
  addresses: [CreateAddressInput!]!
}

input CreateLocationInstanceInput {
  """Location's name"""
  name: MultilingualString!

  """Location's description"""
  description: MultilingualString!

  """Link for location info"""
  wikiLink: String

  """Contains links with location's photos"""
  photoLinks: [String!]

  """Link with main photo"""
  mainPhotoLink: String

  """Location's construction date"""
  constructionDate: String

  """Location's demolition date"""
  demolitionDate: String

  """Start of period"""
  startDate: String

  """End of period"""
  endDate: String

  """Location id to which this instance below"""
  locationId: GlobalId!
}

type CreateLocationInstancePayload {
  """Created location id"""
  recordId: GlobalId!

  """Created location"""
  record: LocationInstance!
}

type CreateLocationPayload {
  """Created location id"""
  recordId: GlobalId!

  """Created location"""
  record: Location!
}

input CreatePersonInput {
  """Person's first name"""
  firstName: String

  """Person's last name"""
  lastName: String

  """Person's patronymic"""
  patronymic: String

  """Person's pseudonym"""
  pseudonym: String

  """Person's profession"""
  profession: String

  """Person's description"""
  description: String

  """Person's birth date"""
  birthDate: String

  """Person's death date"""
  deathDate: String

  """Person's info link"""
  wikiLink: String
}

type CreatePersonPayload {
  """Created person id"""
  recordId: GlobalId!

  """Created person"""
  record: Person!
}

input CreateQuestInput {
  """Quest name"""
  name: String!

  """Quest description"""
  description: String

  """Quest photo"""
  photo: String

  """Quest type (quiz, route, etc.)"""
  type: TaskTypes! = ROUTE

  """Quest data"""
  data: EditorDataInput!
}

type CreateQuestPayload {
  """Created quest id"""
  recordId: GlobalId!

  """Created quest"""
  record: Quest!
}

input CreateRelationInput {
  """Person ID in relation"""
  personId: GlobalId!

  """Location Instance ID in relation"""
  locationInstanceId: GlobalId!

  """Relation type ID"""
  relationId: GlobalId!

  """Quote about relation"""
  quote: MultilingualString!
}

type CreateRelationPayload {
  """Created relation id"""
  recordId: GlobalId!

  """Created relation"""
  record: Relation!
}

input CreateRelationTypeInput {
  """Relation type name"""
  name: MultilingualString!

  """Relation type synonyms"""
  synonyms: [MultilingualString!]!
}

type CreateRelationTypePayload {
  """Created relation type id"""
  recordId: GlobalId!

  """Created relation type"""
  record: RelationType!
}

scalar Cursor

type DeleteLocationInstancePayload {
  """Created location id"""
  recordId: GlobalId!
}

type DeleteLocationPayload {
  """Deleted location id"""
  recordId: GlobalId!
}

type DeletePersonPayload {
  """Deleted person id"""
  recordId: GlobalId!
}

type DeleteQuestPayload {
  """Deleted quest id"""
  recordId: GlobalId!
}

type DeleteRelationPayload {
  """Deleted relation id"""
  recordId: GlobalId!
}

type DeleteRelationTypePayload {
  """Deleted relation type id"""
  recordId: GlobalId!
}

"""
Data saved from Editor.js
See https://editorjs.io/saving-data
"""
type EditorData {
  """Saving timestamp"""
  time: Timestamp

  """List of Blocks data"""
  blocks: [JSON!]!

  """Version of Editor.js"""
  version: String
}

"""
Data saved from Editor.js
See https://editorjs.io/saving-data
"""
input EditorDataInput {
  """Saving timestamp"""
  time: Timestamp

  """List of Blocks data"""
  blocks: [JSON!]!

  """Version of Editor.js"""
  version: String
}

scalar GlobalId

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Supported languages for data"""
enum Languages {
  EN
  RU
}

"""Location for displaying on map and making relations with persons"""
type Location implements Node {
  """Location's ID"""
  id: ID!

  """Location position latitude"""
  latitude: Float

  """Location position longitude"""
  longitude: Float

  """Array of addresses ids"""
  addresses: [Address!]

  """Possible location representations"""
  instances: [LocationInstance!]!
}

"""Model for representing list of locations"""
type LocationConnection {
  """List of locations edges"""
  edges: [LocationEdge!]!

  """Information about this page"""
  pageInfo: PageInfo!

  """Number of available edges"""
  totalCount: Int!
}

"""Information about specific location in connection"""
type LocationEdge {
  """Cursor of this location"""
  cursor: Cursor!

  """Location info"""
  node: Location!
}

"""
Location context. This can be a time period, a special description for a particular route, etc.
"""
type LocationInstance implements Node {
  """Instance's ID"""
  id: ID!

  """Location's name"""
  name: String

  """Location"""
  location: Location!

  """Location's description"""
  description: String

  """Link for location info"""
  wikiLink: String

  """Array of location's types"""
  locationTypes: [LocationType]

  """Contains links with location's photos"""
  photoLinks: [String!]

  """Link with main photo"""
  mainPhotoLink: String

  """Location's construction date"""
  constructionDate: String

  """Location's demolition date"""
  demolitionDate: String

  """Start of period"""
  startDate: String

  """End of period"""
  endDate: String

  """Location relations"""
  relations: [Relation!]!

  """Array of architects"""
  architects: [Person]
}

input LocationInstanceInput {
  """Location's name"""
  name: MultilingualString!

  """Location's description"""
  description: MultilingualString!

  """Link for location info"""
  wikiLink: String

  """Contains links with location's photos"""
  photoLinks: [String!]

  """Link with main photo"""
  mainPhotoLink: String

  """Location's construction date"""
  constructionDate: String

  """Location's demolition date"""
  demolitionDate: String

  """Start of period"""
  startDate: String

  """End of period"""
  endDate: String
}

type LocationInstanceMutations {
  """Create location instance"""
  create(input: CreateLocationInstanceInput!): CreateLocationInstancePayload!

  """Update location instance"""
  update(input: UpdateLocationInstanceInput!): UpdateLocationInstancePayload!

  """Delete location instance"""
  delete(id: GlobalId!): DeleteLocationInstancePayload!
}

type LocationMutations {
  """Create location"""
  create(input: CreateLocationInput!): CreateLocationPayload!

  """Update location"""
  update(input: UpdateLocationInput!): UpdateLocationPayload!

  """Delete location"""
  delete(id: GlobalId!): DeleteLocationPayload!
}

"""Location type to add it to Location"""
type LocationType implements Node {
  """LocationType's ID"""
  id: ID!

  """LocationTypes's name"""
  name: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

"""
The `String` scalar type represents textual data, represented as UTF-8 character
sequences. The String type is most often used by GraphQL to represent free-form
human-readable text.
"""
scalar MultilingualString

"""API mutations"""
type Mutation {
  """Unused field to let extend this type"""
  _: Boolean
  person: PersonMutations
  location: LocationMutations!
  locationInstances: LocationInstanceMutations!
  relation: RelationMutations!
  relationType: RelationTypeMutations!

  """Save route to user"""
  saveRoute(routeId: String!): User!

  """Unsave route from user"""
  deleteRouteFromSaved(routeId: String!): User!

  """Add route to user liked routes"""
  likeRoute(routeId: String!): User!

  """Dislike route"""
  dislikeRoute(routeId: String!): User!
  quest: QuestMutations!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
A field whose value conforms with the standard mongodb object ID as described
here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId.
Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectId

"""Information about current page"""
type PageInfo {
  """Information about the existence of the next page"""
  hasNextPage: Boolean!

  """Information about the existence of the previous page"""
  hasPreviousPage: Boolean!

  """First cursor on this page"""
  startCursor: Cursor

  """Last cursor on this page"""
  endCursor: Cursor
}

type Person implements Node {
  """Person's id"""
  id: ID!

  """Person's first name"""
  firstName: String

  """Person's last name"""
  lastName: String

  """Person's patronymic"""
  patronymic: String

  """Person's pseudonym"""
  pseudonym: String

  """Person's profession"""
  profession: String

  """Person's description"""
  description: String

  """Person's birth date"""
  birthDate: String

  """Person's death date"""
  deathDate: String

  """Person relations"""
  relations: [Relation!]!

  """Person's info link"""
  wikiLink: String

  """Person's main photo"""
  mainPhotoLink: String

  """Person's photos links"""
  photoLinks: [String]
}

"""Model for representing list of persons"""
type PersonConnection {
  """List of persons edges"""
  edges: [PersonEdge!]!

  """Information about this page"""
  pageInfo: PageInfo!

  """Number of available edges"""
  totalCount: Int!
}

"""Information about specific person in connection"""
type PersonEdge {
  """Cursor of this person"""
  cursor: Cursor!

  """Person info"""
  node: Person!
}

type PersonMutations {
  """Create person"""
  create(input: CreatePersonInput!): CreatePersonPayload!

  """Update person"""
  update(input: UpdatePersonInput!): UpdatePersonPayload!

  """Delete person"""
  delete(id: GlobalId!): DeletePersonPayload!
}

"""API queries"""
type Query {
  node(id: ID!): Node

  """Get specific person"""
  person(
    """Person id"""
    id: GlobalId!
  ): Person

  """Get all persons"""
  persons(
    """The cursor after which we take the data"""
    after: Cursor

    """The cursor after before we take the data"""
    before: Cursor

    """
    Number of requested nodes after a node with a cursor in the after argument
    """
    first: Int

    """
    Number of requested nodes before a node with a cursor in the before argument
    """
    last: Int
  ): PersonConnection!

  """Get specific location"""
  location(
    """Location id"""
    id: GlobalId!
  ): Location

  """Get all locations"""
  locations(
    """The cursor after which we take the data"""
    after: Cursor

    """The cursor after before we take the data"""
    before: Cursor

    """
    Number of requested nodes after a node with a cursor in the after argument
    """
    first: Int

    """
    Number of requested nodes before a node with a cursor in the before argument
    """
    last: Int
  ): LocationConnection!

  """Get specific locationInstances"""
  locationInstance(
    """locationInstances id"""
    id: GlobalId!
  ): LocationInstance

  """Get all locationInstances"""
  locationInstances: [LocationInstance!]!

  """Get relations on user request"""
  search(
    """The string on the basis of which the request will be made"""
    searchString: String!
  ): [Relation!]!

  """Returns list of all location types"""
  locationTypes: [LocationType!]!

  """Get specific relation"""
  relation(
    """Relation id"""
    id: GlobalId!
  ): Relation

  """Get all relations"""
  relations(
    """The cursor after which we take the data"""
    after: Cursor

    """The cursor after before we take the data"""
    before: Cursor

    """
    Number of requested nodes after a node with a cursor in the after argument
    """
    first: Int

    """
    Number of requested nodes before a node with a cursor in the before argument
    """
    last: Int
  ): RelationConnection!

  """Get specific relation type"""
  relationType(
    """Relation type id"""
    id: GlobalId!
  ): RelationType

  """List of available relation types"""
  relationTypes(
    """The cursor after which we take the data"""
    after: Cursor

    """The cursor after before we take the data"""
    before: Cursor

    """
    Number of requested nodes after a node with a cursor in the after argument
    """
    first: Int

    """
    Number of requested nodes before a node with a cursor in the before argument
    """
    last: Int
  ): RelationTypeConnection!

  """Get all routes"""
  routes(
    """Search filter"""
    filter: RoutesFilter
  ): [Route!]!

  """Get nearest routes"""
  nearestRoutes(
    """Center coordinates"""
    center: Coordinates!

    """Search radius (in metres)"""
    radius: Float = 4000

    """Search filter"""
    filter: RoutesFilter
  ): [Route!]!

  """Get specific route by id"""
  route(
    """Route id"""
    id: GlobalId!
  ): Route

  """Get info about user"""
  me: User!

  """Get specific Quest"""
  quest(
    """Quest id"""
    id: GlobalId!
  ): Quest

  """Get all quests"""
  quests(
    """The cursor after which we take the data"""
    after: Cursor

    """The cursor after before we take the data"""
    before: Cursor

    """
    Number of requested nodes after a node with a cursor in the after argument
    """
    first: Int

    """
    Number of requested nodes before a node with a cursor in the before argument
    """
    last: Int
  ): QuestConnection!
}

type Quest implements Node {
  """Quest ID"""
  id: ID!

  """Quest name"""
  name: String!

  """Quest description"""
  description: String

  """Quest photo"""
  photo: String

  """Quest type (quiz, route, etc.)"""
  type: TaskTypes!

  """Quest task"""
  task: JSON!

  """Quest data"""
  data: EditorData

  """Quest rewards"""
  rewards: [JSON!]!
}

"""Model for representing list of quests"""
type QuestConnection {
  """List of quests edges"""
  edges: [QuestEdge!]!

  """Information about this page"""
  pageInfo: PageInfo!

  """Number of available edges"""
  totalCount: Int!
}

"""Information about specific quest in connection"""
type QuestEdge {
  """Cursor of this quest"""
  cursor: Cursor!

  """Quest info"""
  node: Quest!
}

type QuestMutations {
  """Create quest"""
  create(input: CreateQuestInput!): CreateQuestPayload!

  """Update quest"""
  update(input: UpdateQuestInput!): UpdateQuestPayload!

  """Delete quest"""
  delete(id: GlobalId!): DeleteQuestPayload!
}

type Region implements Node {
  id: ID!
  code: String!
  name: MultilingualString!
}

"""Represents relation between person and location"""
type Relation implements Node {
  """Relation's id"""
  id: ID!

  """Person in relation"""
  person: Person

  """Location in relation"""
  locationInstance: LocationInstance

  """Relation type"""
  relationType: RelationType

  """Relation's quote"""
  quote: String
}

"""Model for representing list of relations"""
type RelationConnection {
  """List of persons edges"""
  edges: [RelationEdge!]!

  """Information about this page"""
  pageInfo: PageInfo!

  """Number of available edges"""
  totalCount: Int!
}

"""Information about specific relation in connection"""
type RelationEdge {
  """Cursor of this person"""
  cursor: Cursor!

  """Person info"""
  node: Relation!
}

type RelationMutations {
  """Create relation"""
  create(input: CreateRelationInput!): CreateRelationPayload!

  """Update relation"""
  update(input: UpdateRelationInput!): UpdateRelationPayload!

  """Delete relation"""
  delete(id: GlobalId!): DeleteRelationPayload!
}

"""Represents one of the relations types"""
type RelationType implements Node {
  """Relation type id"""
  id: ID!

  """Relation type name"""
  name: MultilingualString!

  """Relation type synonyms"""
  synonyms: [MultilingualString]!
}

"""Model for representing list of relation types"""
type RelationTypeConnection {
  """List of relation types edges"""
  edges: [RelationTypeEdge!]!

  """Information about this page"""
  pageInfo: PageInfo!

  """Number of available edges"""
  totalCount: Int!
}

"""Information about specific relation type in connection"""
type RelationTypeEdge {
  """Cursor of this relation type"""
  cursor: Cursor!

  """Relation type info"""
  node: RelationType!
}

type RelationTypeMutations {
  """Creates relation type"""
  create(input: CreateRelationTypeInput!): CreateRelationTypePayload!

  """Update relation type"""
  update(input: UpdateRelationTypeInput!): UpdateRelationTypePayload!

  """Delete relation type"""
  delete(id: GlobalId!): DeleteRelationTypePayload!
}

"""Route between locations"""
type Route implements Node {
  """Route id"""
  id: ID!

  """Route name"""
  name: String

  """Route locations"""
  locationsInstance: [LocationInstance]!

  """Route description"""
  description: String

  """Route photo"""
  photoLink: String
}

"""Input to search routes"""
input RoutesFilter {
  """String for searching in all languages"""
  contains: String!
}

"""Possible task types"""
enum TaskTypes {
  """Task type quiz"""
  QUIZ

  """Task type route"""
  ROUTE
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateAddressInput {
  countryCode: String
  regionCode: String
  place: MultilingualString
  locality: MultilingualString
  address: MultilingualString
  address2: MultilingualString
  postcode: MultilingualString
}

input UpdateLocationInput {
  """Location id to update"""
  id: GlobalId!

  """Location position latitude"""
  latitude: Float

  """Location position longitude"""
  longitude: Float
  addresses: [UpdateAddressInput!]
}

input UpdateLocationInstanceInput {
  """Location instance id"""
  id: GlobalId!

  """Location's name"""
  name: MultilingualString!

  """Location's description"""
  description: MultilingualString!

  """Link for location info"""
  wikiLink: String

  """Contains links with location's photos"""
  photoLinks: [String!]

  """Link with main photo"""
  mainPhotoLink: String

  """Location's construction date"""
  constructionDate: String

  """Location's demolition date"""
  demolitionDate: String

  """Start of period"""
  startDate: String

  """End of period"""
  endDate: String
}

type UpdateLocationInstancePayload {
  """Created location id"""
  recordId: GlobalId!

  """Created location"""
  record: LocationInstance!
}

type UpdateLocationPayload {
  """Updated location id"""
  recordId: GlobalId!

  """Updated location"""
  record: Location!
}

input UpdatePersonInput {
  """ID of person for updating"""
  id: GlobalId!

  """Person's first name"""
  firstName: String

  """Person's last name"""
  lastName: String

  """Person's patronymic"""
  patronymic: String

  """Person's pseudonym"""
  pseudonym: String

  """Person's profession"""
  profession: String

  """Person's description"""
  description: String

  """Person's birth date"""
  birthDate: String

  """Person's death date"""
  deathDate: String

  """Person's info link"""
  wikiLink: String
}

type UpdatePersonPayload {
  """Updated person id"""
  recordId: GlobalId!

  """Updated person"""
  record: Person!
}

input UpdateQuestInput {
  """Quest ID"""
  id: GlobalId!

  """Quest name"""
  name: String

  """Quest description"""
  description: String

  """Quest photo"""
  photo: String

  """Quest type (quiz, route, etc.)"""
  type: TaskTypes

  """Quest data"""
  data: EditorDataInput
}

type UpdateQuestPayload {
  """Updated quest id"""
  recordId: GlobalId!

  """Updated quest"""
  record: Quest!
}

input UpdateRelationInput {
  """ID of relation for updating"""
  id: GlobalId!

  """Person ID in relation"""
  personId: GlobalId

  """Location Instance ID in relation"""
  locationInstanceId: GlobalId

  """Relation type ID"""
  relationId: GlobalId

  """Quote about relation"""
  quote: MultilingualString
}

type UpdateRelationPayload {
  """Updated relation id"""
  recordId: GlobalId!

  """Updated relation"""
  record: Relation!
}

input UpdateRelationTypeInput {
  """ID of relation type for updating"""
  id: GlobalId!

  """Relation type name"""
  name: MultilingualString

  """Relation type synonyms"""
  synonyms: [MultilingualString]
}

type UpdateRelationTypePayload {
  """Updated relation type id"""
  recordId: GlobalId!

  """Updated relation type"""
  record: RelationType!
}

type User implements Node {
  """User's ID"""
  id: ID!

  """Username"""
  username: String!

  """User saved routes"""
  savedRoutes: [Route!]!

  """User liked routes"""
  likedRoutes: [Route!]!
}

